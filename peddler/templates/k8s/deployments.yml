{% if RUN_CADDY %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: caddy
  labels:
    app.kubernetes.io/name: caddy
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: caddy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: caddy
    spec:
      containers:
        - name: caddy
          image: {{ DOCKER_IMAGE_CADDY }}
          volumeMounts:
            - mountPath: /etc/caddy/
              name: config
            - mountPath: /data/
              name: data
          ports:
            - containerPort: 80
            - containerPort: 443
      volumes:
        - name: config
          configMap:
            name: caddy-config
        - name: data
          persistentVolumeClaim:
            claimName: caddy
{% endif %}
{% if RUN_STORE %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: store
  labels:
    app.kubernetes.io/name: store
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: store
  template:
    metadata:
      labels:
        app.kubernetes.io/name: store
    spec:
      containers:
        - name: store
          image: {{ DOCKER_IMAGE_OPENCART }}
          ports:
            - containerPort: 80
        #   volumeMounts:
        #     - mountPath: /openedx/edx-platform/lms/envs/tutor/
        #       name: settings-lms
        #     - mountPath: /openedx/edx-platform/cms/envs/tutor/
        #       name: settings-cms
        #     - mountPath: /openedx/config
        #       name: config
          resources:
            requests:
              memory: 2Gi
    #   volumes:
    #     - name: settings-lms
    #       configMap:
    #         name: openedx-settings-lms
    #     - name: settings-cms
    #       configMap:
    #         name: openedx-settings-cms
    #     - name: config
    #       configMap:
    #         name: openedx-config
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: lms-worker
#   labels:
#     app.kubernetes.io/name: lms-worker
# spec:
#   selector:
#     matchLabels:
#       app.kubernetes.io/name: lms-worker
#   template:
#     metadata:
#       labels:
#         app.kubernetes.io/name: lms-worker
#     spec:
#       containers:
#         - name: lms-worker
#           image: {{ DOCKER_IMAGE_OPENCART }}
#           args: ["celery", "worker", "--app=lms.celery", "--loglevel=info", "--hostname=edx.lms.core.default.%%h", "--maxtasksperchild=100", "--exclude-queues=edx.cms.core.default"]
#           env:
#           - name: SERVICE_VARIANT
#             value: lms
#           - name: C_FORCE_ROOT
#             value: "1"
#           volumeMounts:
#             - mountPath: /openedx/edx-platform/lms/envs/tutor/
#               name: settings-lms
#             - mountPath: /openedx/edx-platform/cms/envs/tutor/
#               name: settings-cms
#             - mountPath: /openedx/config
#               name: config
#       volumes:
#         - name: settings-lms
#           configMap:
#             name: openedx-settings-lms
#         - name: settings-cms
#           configMap:
#             name: openedx-settings-cms
#         - name: config
#           configMap:
#             name: openedx-config
{% endif %}
{% if RUN_MYSQL %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app.kubernetes.io/name: mysql
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
    spec:
      containers:
        - name: mysql
          image: {{ DOCKER_IMAGE_MYSQL }}
          # Note the ignore-db-dir: this is because ext4 volumes are created with a lost+found directory in them, which causes mysql
          # initialization to fail
          args: ["mysqld", "--character-set-server=utf8", "--collation-server=utf8_general_ci", "--ignore-db-dir=lost+found"]
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "{{ MYSQL_ROOT_PASSWORD }}"
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mysql
{% endif %}
{% if RUN_SMTP %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smtp
  labels:
    app.kubernetes.io/name: smtp
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: smtp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: smtp
    spec:
      containers:
        - name: smtp
          image: {{ DOCKER_IMAGE_SMTP }}
          ports:
            - containerPort: 25
{% endif %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app.kubernetes.io/name: nginx
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
    spec:
      containers:
        - name: nginx
          image: {{ DOCKER_IMAGE_NGINX }}
          volumeMounts:
            - mountPath: /etc/nginx/conf.d/
              name: config
            {{ patch("k8s-deployments-nginx-volume-mounts")|indent(12) }}
          ports:
            - containerPort: 80
      volumes:
        - name: config
          configMap:
            name: nginx-config
        {{ patch("k8s-deployments-nginx-volumes")|indent(8) }}
{{ patch("k8s-deployments") }}